import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiomysql import Pool, Cursor

from filters.CheckBalance import CheckBalance
from filters.ValidMessageFilter import ValidMessageFilter
from lexicon.colors import COLOR_EMOJIS
from aiomysql import Error as AiomysqlError

from FSM.FSM import GameStates
from db.database import user_messages, bet_messages, roulette_messages, users_bet, total_bet, double_messages
from db.queries import SELECT_BALANCE, UPDATE_BALANCE_BEFORE_SPIN, UPDATE_BALANCE_AFTER_SPIN, UPDATE_USER_LANG, \
    UPDATE_WIN_RESULTS, UPDATE_LOST_RESULTS, SELECT_USER_LASTBONUS, UPDATE_USER_LASTBONUS, UPDATE_BALANCE
from services.roulette_logic import spin_roulette, calculate_win_and_payout
from services.updates import clear_dicts, end_roulette, delete_user_messages, delete_double_messages, delete_bet_mes

BONUS_COOLDOWN = timedelta(hours=24)
BONUS_AMOUNT = 2500

user_callback = Router()


@user_callback.callback_query(ValidMessageFilter(roulette_messages), (F.data.startswith("bet_")), CheckBalance())
async def bet_handler(callback: CallbackQuery, state: FSMContext, username, dp_pool: Pool, user_id):
    await callback.answer()
    bet_data = callback.data.split("_")
    bet_sum = int(bet_data[1])  # 500, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    bet_range_or_color = bet_data[2]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "1-18"

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            cursor: Cursor
            await cursor.execute(SELECT_BALANCE, user_id)
            row = await cursor.fetchone()
            if row is None:
                logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ")
                return
            balance = row[0]
            if not (bet_sum <= balance):
                await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
                logging.debug("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return

    bet_color = None
    if bet_range_or_color in ['red', 'green', 'black']:
        bet_color = COLOR_EMOJIS[bet_range_or_color]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–≤–∏–ª, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Å–ø–∏—Å–æ–∫
    if user_id in users_bet:
        logging.debug(users_bet[user_id])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —ç—Ç–æ—Ç bet_range_or_color
        for bet in users_bet[user_id]:
            if bet[1] == bet_range_or_color:
                bet[0] += bet_sum  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É
                action = "—É–≤–µ–ª–∏—á–µ–Ω–∞"
                total_bet[user_id] += bet_sum

                break
        else:
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            users_bet[user_id].append([bet_sum, bet_range_or_color, username])
            action = "–ø—Ä–∏–Ω—è—Ç–∞"
            total_bet[user_id] += bet_sum
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_bet[user_id] = [[bet_sum, bet_range_or_color, username]]
        action = "–ø—Ä–∏–Ω—è—Ç–∞"
        total_bet[user_id] = bet_sum
        await state.set_state(GameStates.waiting_for_bet)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bet_message = await callback.message.answer(
        text=f"""–°—Ç–∞–≤–∫–∞ {action}: <a href="tg://user?id={user_id}">{username}</a> {bet_sum} –º–æ–Ω–µ—Ç –Ω–∞ {bet_color or bet_range_or_color}""",
        parse_mode="HTML"
    )

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_BALANCE_BEFORE_SPIN, (bet_sum, user_id))
            logging.debug('Your bet is successful')

    if user_id not in bet_messages:
        bet_messages[user_id] = []

    bet_messages[user_id].append({
        "chat_id": bet_message.chat.id,
        "message_id": bet_message.message_id
    })


@user_callback.callback_query(ValidMessageFilter(roulette_messages), (F.data == 'spin'), GameStates.waiting_for_bet)
async def spin_handler(callback: CallbackQuery, bot: Bot, state: FSMContext, dp_pool: Pool, username, user_id, chat_id):
    number, color = spin_roulette()

    await state.update_data(bet_result=(number, color))
    await callback.message.delete()

    bet_results = []
    total_bet_sum = 0
    total_payout_sum = 0

    for uid, bets in users_bet.items():
        for bet in bets:
            amount, target, username = bet
            total_bet_sum += amount
            is_win, payout = calculate_win_and_payout(number, color, target, amount)

            if is_win:
                total_payout_sum += payout
                bet_results.append(
                    f"üí≤ <a href='tg://user?id={uid}'>{username}</a> –≤—ã–∏–≥—Ä–∞–ª {payout} –Ω–∞ {COLOR_EMOJIS.get(target, target)}")

                async with dp_pool.acquire() as conn:
                    async with conn.cursor() as cursor:
                        await cursor.execute(UPDATE_BALANCE_AFTER_SPIN, (payout, user_id))

            bet_results.append(f"üêæ {username} {amount} –Ω–∞ {COLOR_EMOJIS.get(target, target)}")

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            if total_payout_sum > total_bet_sum:
                await cursor.execute(UPDATE_WIN_RESULTS, (total_payout_sum - total_bet_sum, user_id))
            else:
                await cursor.execute(UPDATE_LOST_RESULTS, (total_bet_sum - total_payout_sum, user_id))

    await delete_bet_mes(bot)
    clear_dicts()
    await state.clear()

    mes_spin = await callback.message.answer(
        f'<a href="tg://user?id={user_id}">{username}</a> –∫—Ä—É—Ç–∏—Ç...(3 —Å–µ–∫)',
        parse_mode="HTML"
    )

    bot_message = await bot.send_animation(
        chat_id=chat_id,
        animation='CgACAgQAAxkBAAIBTWhhY9tM5QKXejsi-QvzHNXRXgLMAALVAgACuiENU9OiouXPz52yNgQ'
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    user_messages[user_id] = {
        "chat_id": chat_id,
        "user_msg": mes_spin.message_id,
        "bot_msg": bot_message.message_id,
    }

    await asyncio.sleep(3)

    await delete_user_messages(bot)
    logging.debug('try delete_double_messages()')
    await delete_double_messages(bot)

    sorted_lines = sorted(bet_results, key=lambda s: s.split()[0])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    text_sorted = "\n".join(sorted_lines)

    await callback.message.answer(
        text=f"üéØ –í—ã–ø–∞–ª –Ω–æ–º–µ—Ä: {number} {COLOR_EMOJIS[color]}\n"
             f"{text_sorted}",
        parse_mode="HTML"
    )
    await end_roulette(chat_id=chat_id)
    clear_dicts()


@user_callback.callback_query(ValidMessageFilter(roulette_messages), F.data == 'spin')
async def spin_wrong_state(callback: CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!")


@user_callback.callback_query(ValidMessageFilter(roulette_messages), F.data == 'double')
async def double_bet(callback: CallbackQuery, bot: Bot, dp_pool: Pool, user_id, username):
    if user_id not in users_bet or not users_bet[user_id]:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
        return
    logging.debug(users_bet)

    bets_text = f"{username} —É–¥–≤–æ–∏–ª –≤—Å–µ —Å–≤–æ–∏ —Å—Ç–∞–≤–∫–∏:\n"
    # 1. –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É —É–¥–≤–æ–µ–Ω–∏—è, –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—è —Å—Ç–∞–≤–∫–∏
    new_total = sum(bet[0] for bet in users_bet[user_id])  # —Å—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫
    double_sum = new_total  # —Å—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            try:
                await conn.begin()
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
                await cursor.execute(SELECT_BALANCE, (user_id,))
                row = await cursor.fetchone()
                if row is None:
                    await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                    await conn.rollback()
                    return

                balance = row[0]
                if double_sum > balance:
                    await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
                    logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞ {double_sum}, –Ω–æ –±–∞–ª–∞–Ω—Å: {balance}")
                    await conn.rollback()
                    return

                # 3. –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                await cursor.execute(UPDATE_BALANCE_BEFORE_SPIN, (double_sum, user_id))

                # 4. –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–ø–µ—Ä—å
                for bet in users_bet[user_id]:
                    bet[0] *= 2
                total_bet[user_id] += double_sum
                await conn.commit()

            except AiomysqlError as e:
                await conn.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            except Exception as e:
                await conn.rollback()
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    bets_text += "\n".join(
        [f"üí∞ {b[0]} –Ω–∞ {COLOR_EMOJIS.get(b[1], b[1])}" for b in users_bet[user_id]]
    )

    if user_id in double_messages:
        try:
            await bot.edit_message_text(
                text=f"{bets_text}\n–û–±—â–∞—è —Å—Ç–∞–≤–∫–∞: {total_bet[user_id]}",
                chat_id=double_messages[user_id]["chat_id"],
                message_id=double_messages[user_id]["message_id"]
            )
        except TelegramBadRequest as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        double_message = await callback.message.answer(f"{bets_text}\n–û–±—â–∞—è —Å—Ç–∞–≤–∫–∞: {total_bet[user_id]}")

        double_messages[user_id] = {
            "chat_id": double_message.chat.id,
            "message_id": double_message.message_id
        }


@user_callback.callback_query(ValidMessageFilter(roulette_messages), F.data == 'cancel')
async def spin_wrong_state(callback: CallbackQuery, bot: Bot, state: FSMContext, username, user_id, dp_pool: Pool):
    if user_id not in users_bet or not users_bet[user_id]:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
        return

    await delete_bet_mes(bot)
    await delete_double_messages(bot)
    await state.clear()

    total = total_bet[user_id]
    await callback.answer(f"{username} –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_BALANCE_AFTER_SPIN, (total, user_id))

    clear_dicts()


@user_callback.callback_query(F.data == "bonus")
async def process_bonus(callback: CallbackQuery, dp_pool: Pool, user_id):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
            await cursor.execute(SELECT_USER_LASTBONUS, (user_id,))
            result = await cursor.fetchone()

            now = datetime.now()
            if result and result[0]:
                last_bonus_time = result[0]
                if now - last_bonus_time < BONUS_COOLDOWN:
                    # –ï—â—ë —Ä–∞–Ω–æ
                    next_time = last_bonus_time + BONUS_COOLDOWN
                    remaining = next_time - now
                    hours, remainder = divmod(int(remaining.total_seconds()), 3600)
                    minutes = remainder // 60
                    await callback.answer(f"–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
                    return

            await callback.answer()
            # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
            await cursor.execute(UPDATE_USER_LASTBONUS, (now, user_id))

            await cursor.execute(UPDATE_BALANCE, (BONUS_AMOUNT, user_id))
            await conn.commit()

            await callback.message.answer(f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å +{BONUS_AMOUNT} –º–æ–Ω–µ—Ç!")


@user_callback.callback_query(F.data.startswith("lang_"))
async def process_language_choice(callback: CallbackQuery, state: FSMContext, dp_pool: Pool, user_id):
    lang_code = callback.data.split('_')[1]

    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_USER_LANG, (lang_code, user_id))

    await state.update_data(language=lang_code)

    await callback.answer(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_code.upper()}")
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code.upper()}")
    await callback.message.delete()
