import asyncio
import logging
from datetime import datetime, timedelta

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, TelegramObject
from aiomysql import Pool
from aiomysql import Error as AiomysqlError

from db.database import total_bet, users_bet
from db.queries import SELECT_BALANCE, UPDATE_BALANCE_BEFORE_SPIN, SELECT_USER_LANG, UPDATE_BALANCE_AFTER_SPIN, \
    UPDATE_WIN_RESULTS, UPDATE_LOST_RESULTS, SELECT_MAXWIN_RESULTS, SELECT_MAXBET_RESULTS, UPDATE_MAXWIN_RESULTS, \
    UPDATE_MAXBET_RESULTS, UPDATE_USER_ACTIVE, SELECT_DATA_FROM_RESULTS, SELECT_USER_LASTBONUS, UPDATE_USER_LASTBONUS, \
    UPDATE_BALANCE, UPDATE_USER_LANG

BONUS_COOLDOWN = timedelta(hours=24)
BONUS_AMOUNT = 2500


async def get_user_lang(state: FSMContext, user_id: int, dp_pool) -> str:
    data = await state.get_data()
    if 'language' in data:
        return data['language']  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞ FSM

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ FSM ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(SELECT_USER_LANG, (user_id,))
            row = await cursor.fetchone()
            lang = row[0] if row else 'ru'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ FSMContext, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–µ —á–∏—Ç–∞—Ç—å –∏–∑ –±–∞–∑—ã
    await state.update_data(language=lang)
    return lang


async def handle_double_bet(callback: CallbackQuery, dp_pool: Pool, user_id: int, double_sum: int) -> None:
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            try:
                await conn.begin()
                await cursor.execute(SELECT_BALANCE, (user_id,))
                row = await cursor.fetchone()
                if row is None:
                    await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                    await conn.rollback()
                    return

                balance = row[0]
                if double_sum > balance:
                    await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
                    logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞ {double_sum}, –Ω–æ –±–∞–ª–∞–Ω—Å: {balance}")
                    await conn.rollback()
                    return

                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                await cursor.execute(UPDATE_BALANCE_BEFORE_SPIN, (double_sum, user_id))

                #  –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –¢–û–õ–¨–ö–û —Ç–µ–ø–µ—Ä—å
                for bet in users_bet[user_id]:
                    bet[0] *= 2
                total_bet[user_id] += double_sum
                await conn.commit()

            except AiomysqlError as e:
                await conn.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            except Exception as e:
                await conn.rollback()
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


async def check_user_balance(dp_pool: Pool, user_id):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(SELECT_BALANCE, (user_id,))
            row = await cursor.fetchone()
            if not row:
                return False
            balance = row[0]
            if balance is None:
                return False
            return int(balance) > 2000


async def update_balance_before_spin(dp_pool: Pool, bet_sum: int, user_id: int) -> None:
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_BALANCE_BEFORE_SPIN, (bet_sum, user_id))


async def update_balance_after_spin(dp_pool: Pool, payout: int, user_id: int) -> None:
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_BALANCE_AFTER_SPIN, (payout, user_id))


async def update_statistics(user_id: int, total_bet_sum: int, total_payout_sum: int, dp_pool: Pool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—É–Ω–¥–∞."""
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            if total_payout_sum > total_bet_sum:
                await cursor.execute(UPDATE_WIN_RESULTS, (total_payout_sum, user_id))
            else:
                await cursor.execute(UPDATE_LOST_RESULTS, (total_bet_sum, user_id))

            await cursor.execute(SELECT_MAXWIN_RESULTS, user_id)
            (maxWin,) = await cursor.fetchone()

            await cursor.execute(SELECT_MAXBET_RESULTS, user_id)
            (maxBet,) = await cursor.fetchone()

            if total_payout_sum > maxWin:
                await cursor.execute(UPDATE_MAXWIN_RESULTS, (total_payout_sum, user_id))

            if total_bet_sum > maxBet:
                await cursor.execute(UPDATE_MAXBET_RESULTS, (total_bet_sum, user_id))


async def check_and_get_valid_bet(
        message: Message,
        dp_pool: Pool,
        user_id: int,
        min_balance: int = 50,
        bet_sum: int | None = None,
) -> int | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å.
    –ï—Å–ª–∏ bet_sum –Ω–µ –∑–∞–¥–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç max –¥–æ–ø—É—Å—Ç–∏–º—É—é —Å—Ç–∞–≤–∫—É (balance).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç.
    """
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(SELECT_BALANCE, (user_id,))
            row = await cursor.fetchone()

            if row is None:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                return None

            balance = row[0]

            if balance < min_balance:
                warn = await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                await asyncio.sleep(5)
                await message.delete()
                await warn.delete()
                return None

            if bet_sum is not None and bet_sum > balance:
                warn = await message.answer("–°—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å.")
                await asyncio.sleep(5)
                await message.delete()
                await warn.delete()
                return None

            # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é
            return bet_sum if bet_sum is not None else int(balance)


async def update_user_active(dp_pool: Pool, event: TelegramObject):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_USER_ACTIVE, (0, event.from_user.id))
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')


async def get_balance_data(dp_pool: Pool, username: str, user_id: int):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(SELECT_BALANCE, user_id)
            (balance,) = await cursor.fetchone()
            if not balance:
                balance = 0
                logging.error(f"Cannot get {username} {user_id} = BALANCE")
            await cursor.execute(SELECT_DATA_FROM_RESULTS, (user_id,))
            row = await cursor.fetchone()
            if row:
                winCoin, loseCoin, maxWin, maxBet = row
            return balance, winCoin, loseCoin, maxWin, maxBet


async def get_balance(dp_pool: Pool, user_id):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(SELECT_BALANCE, user_id)
            (balance,) = await cursor.fetchone()
            return balance


async def update_balance_after_bonus(callback: CallbackQuery, dp_pool: Pool, user_id: int):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
            await cursor.execute(SELECT_USER_LASTBONUS, (user_id,))
            result = await cursor.fetchone()

            now = datetime.now()
            if result and result[0]:
                last_bonus_time = result[0]
                if now - last_bonus_time < BONUS_COOLDOWN:
                    # –ï—â—ë —Ä–∞–Ω–æ
                    next_time = last_bonus_time + BONUS_COOLDOWN
                    remaining = next_time - now
                    hours, remainder = divmod(int(remaining.total_seconds()), 3600)
                    minutes = remainder // 60
                    await callback.answer(f"–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
                    return

            if await check_user_balance(dp_pool, user_id):
                await callback.answer("–î–ª—è –±–æ–Ω—É—Å–∞ –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ 2000 –º–æ–Ω–µ—Ç–æ–∫.")
                return

            await callback.answer()
            # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
            await cursor.execute(UPDATE_USER_LASTBONUS, (now, user_id))

            await cursor.execute(UPDATE_BALANCE, (BONUS_AMOUNT, user_id))
            await conn.commit()

            await callback.message.answer(f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å +{BONUS_AMOUNT} –º–æ–Ω–µ—Ç!")


async def update_user_lang(dp_pool: Pool, lang_code: str, user_id: int):
    async with dp_pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(UPDATE_USER_LANG, (lang_code, user_id))
